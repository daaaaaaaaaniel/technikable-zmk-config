/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define TBLE_ORTHO   true
// #define TBLE_MIT     true
// #define TBLE_DUAL_2U true

#define BAS_L 0
#define NAV_L 1
#define NUM_L 2
#define SYM_L 3

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

&sk {
    release-after-ms = <2000>;
    quick-release;
};

#define BT(n) BT_SEL n

/ {
    chosen {
       zmk,matrix_transform =
#ifdef TBLE_DUAL_2U
                       &dual_2u_transform;
#elif defined(TBLE_MIT)
                       &mit_transform;
#else
                       &ortho_transform;
#endif
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
	tri_layer {
	    if-layers = <NAV_L NUM_L>;
	    then-layer = <SYM_L>;
	};
    };
    
    behaviors {
        shat: one_at {
            compatible = "zmk,behavior-mod-morph";
            label = "ONE_AT";
            #binding-cells = <0>;
            bindings = <&kp N1>, <&kp AT_SIGN>;
            mods = <MOD_RSFT>;
        };
        shhash: two_hash {
            compatible = "zmk,behavior-mod-morph";
            label = "TWO_HASH";
            #binding-cells = <0>;
            bindings = <&kp N2>, <&kp HASH>;
            mods = <MOD_RSFT>;
        };
        shdllr: three_dollar {
            compatible = "zmk,behavior-mod-morph";
            label = "THREE_DOLLAR";
            #binding-cells = <0>;
            bindings = <&kp N3>, <&kp DOLLAR>;
            mods = <MOD_RSFT>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
 &kp LCMD   &kp Q      &kp W      &kp E       &kp R          &kp T          &kp Y            &kp U          &kp I       &kp O      &kp P         &kp RCMD
 &kp LALT   &kp A      &kp S      &kp D       &kp F          &kp G          &kp H            &kp J          &kp K       &kp L      &kp QUOT      &kp RALT
 &caps_word &kp Z      &kp X      &kp C       &kp V          &kp B          &kp N            &kp M          &kp COMMA   &kp DOT    &kp FSLH      &kp RSHFT
#ifdef TBLE_DUAL_2U
                       &kp LCTRL  &kp LALT      &lt NAV_L SPACE                &lt NUM_L SPACE              &kp RALT    &kp RCTRL
#elif defined(TBLE_MIT)
                       &kp LCTRL  &kp LALT    &mo NAV_L          &kp SPACE                   &mo NUM_L      &kp RALT    &kp RCTRL
#else
                       &kp LG(LCTRL) &kp LG(LALT)  &sk LSHFT      &mo NAV_L      &kp SPACE        &mo NUM_L      &kp RG(RALT)    &kp RG(RCTRL)
#endif
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
&kp LCMD   &kp EXCL   &kp GRAVE  &kp TAB     &kp DLLR        &kp PRCNT    &kp LPAR   &kp RPAR       &kp UARW    &kp EQUAL  &kp MINUS  &kp ESC
&kp LALT   &kp CARET  &kp AMPS   &kp ASTRK   &kp LPAR        &kp RPAR     &trans     &kp LARW       &kp DARW    &kp RARW   &kp SEMI   &kp CAPS
&kp LCTRL  &trans     &trans     &trans      &trans          &trans       &kp LARW   &kp DARW       &kp RARW    &kp ESC    &kp BSLH   &kp RET
#ifdef TBLE_DUAL_2U
                      &trans     &trans              &trans                    &trans       &trans         &trans
#elif defined(TBLE_MIT)
                      &trans     &trans      &trans                &trans             &trans      &trans   &trans
#else
                      &trans     &trans      &trans          &trans       &kp BKSP  &trans  &trans         &trans
#endif
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
&trans     &kp EXCL   &shat      &shhash     &shdllr   &kp PRCNT   &kp LPAR      &kp RPAR       &kp UNDER    &kp PLUS     &kp ESC    &trans
&trans     &trans     &kp N4     &kp N5      &kp N6    &kp C_PREV  &kp C_NEXT    &trans         &kp LBRC     &kp RBRC     &trans     &kp LALT
&trans     &trans     &kp N7     &kp N8      &kp N9    &trans      &trans        &trans         &kp LT       &kp GT       &kp BSLH   &trans
#ifdef TBLE_DUAL_2U
                     &trans     &kp N0              &kp MINUS                 &trans            &trans         &trans
#elif defined(TBLE_MIT)
                     &trans     &kp N0      &kp MINUS           &none            &kp ESC        &kp DEL      &trans
#else
                     &trans     &kp N0      &kp trans    &trans        &kp DEL   &trans         &kp ESC      &trans
#endif
            >;
        };

        sym_layer {
            label = "Sym";
            bindings = <
&bt BT_CLR &kp LS(N1) &kp LS(N2) &kp LS(N3)  &kp LS(N4)   &kp LS(N5)   &kp LS(N6) &kp LS(N7) &kp LS(N8)  &kp LS(N9)   &kp LS(N0) &kp RCTRL
&trans     &kp F1     &kp F2     &kp F3      &kp F4       &kp F5       &kp F6     &kp PG_UP  &kp HOME    &bt BT_PRV   &bt BT_NXT &kp RALT
&trans     &kp F7     &kp F8     &kp F9      &kp F10      &kp F11      &kp F12    &kp PG_DN  &kp END     &trans       &kp PIPE   &kp RCMD
#ifdef TBLE_DUAL_2U
                      &trans     &kp LS(N0)              &trans                    &trans       &trans         &trans
#elif defined(TBLE_MIT)
                      &trans     &kp LS(N0)      &trans                &trans             &trans      &trans   &trans
#else
                      &trans     &kp LS(N0)      &trans          &trans       &trans    &trans  &bt BT(0)      &bt BT(1)
#endif
            >;
        };

    };
};
